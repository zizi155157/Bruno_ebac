# -*- coding: utf-8 -*-
"""Profissao Analista de dados M19 Exercicio tentado resolver  - Copia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SN4MVIltYHLZapyoS13gJQ0V_n9It61n

<img src="https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/main/media/logo/newebac_logo_black_half.png" alt="ebac-logo">

---

# **Módulo** | Análise de Dados: Controle de Versão III
Caderno de **Exercícios**<br>
Professor [André Perez](https://www.linkedin.com/in/andremarcosperez/)

---

# **Tópicos**

<ol type="1">
  <li>Sistema de branchs;</li>
  <li>Trabalhando com branchs;</li>
  <li>Mover código entre branchs.</li>
</ol>

---

# **Exercícios**

## 1\. Setup

Para realizar os exercicios vamos configurar o `git` e trazer o projeto do GitHub para a a máquina virtual do Google Colab (ou na sua máquina local, as instruções são as mesmas). Para tanto, replique as atividades expostas na aula 1 deste módulo.

### **1.1. Autenticação**

Nesta etapa, vamos configura o `git` com suas credenciais.
"""

import os

username = "zizi155" # insira o seu nome de usuário do git
os.environ["GITHUB_USER"] = username

!git config --global user.name "${GITHUB_USER}"

import os
from getpass import getpass

usermail = getpass()
os.environ["GITHUB_MAIL"] = usermail

!git config --global user.email "${GITHUB_MAIL}"

import os
from getpass import getpass

usertoken = getpass()
os.environ["GITHUB_TOKEN"] = usertoken

"""### **1.2. Projeto**

Nesta etapa, vamos trazer o projeto do GitHub para máquina local.
"""

!git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/zizi155/teste-da-ebac.git

 # insira o link do seu repositório remoto

with open('gasolina.csv', 'w') as file:
    file.write("dia,venda\n")
    file.write("1,5.11\n")
    file.write("2,4.99\n")
    file.write("3,5.02\n")
    file.write("4,5.21\n")
    file.write("5,5.07\n")
    file.write("6,5.09\n")
    file.write("7,5.13\n")
    file.write("8,5.12\n")
    file.write("9,4.94\n")
    file.write("10,5.03\n")

new_var = %cd /content/teste-da-ebac/
new_var # insira o nome do seu repositório

"""---

## 2\. Preço da gasolina

O código abaixo gera um arquivo com o preço médio de venda da gasolina na cidade de São Paulo nos 10 primeiros dias de Julho de 2021.

> **Nota**: Este arquivo é o mesmo do exercício do módulo anterior.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile gasolina.csv
# dia,venda
# 1,5.11
# 2,4.99
# 3,5.02
# 4,5.21
# 5,5.07
# 6,5.09
# 7,5.13
# 8,5.12
# 9,4.94
# 10,5.03

"""### **2.1. Branch**

Crie uma branch chamada `develop` e aponte o context do `git` para a nova branch. Vamos simular uma atualização no exercício do módulo anterior.
"""

os.system('git checkout -b develope')
os.system('git checkout develope')

with open('README.md', 'a') as file:
    file.write("Esta é uma atualização de exemplo.\n")

os.system('git add README.md')
os.system('git commit -m "Adicionada uma linha de exemplo ao README.md"')

!git checkout -b develop main

!git add gasolina.csv

!git branch -a

!git status

!git add gasolina.py

!git commit -m "cor do grafico alterado para green em develop"

"""### **2.2. Desenvolvimento**

Gere uma gráfico de linha utilizando os dados do arquivo `gasolina.csv` com o dia no eixo `x`
 e o seu preço no eixo `y` utilizando os pacotes Python de sua preferência, como o Pandas e o Seaborn. Salve o gráfico no arquivo `gasolina.png` e o seu código Python de geração no arquivo `gasolina.py`.

> **Nota**: Este gráfico deve alguns elementos diferente do anterior, como título, legenda, etc.
"""

from google.colab import drive
drive.mount('/content/drive')

# Importação das bibliotecas necessárias
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os

# Caminho do arquivo CSV
arquivo = '/content/gasolina.csv'

# Verifica se o arquivo existe
if os.path.exists(arquivo):
    # Carregando os dados do CSV em um DataFrame
    gasolina_df = pd.read_csv(arquivo)

    # Exibindo as primeiras linhas para verificar os dados
    print(gasolina_df.head())

    # Configurando o estilo do gráfico
    sns.set(style="whitegrid")

    # Definindo o tamanho do gráfico
    plt.figure(figsize=(10, 6))

    # Gerando o gráfico de linha com o dia no eixo X e o preço no eixo Y
    # Changed 'preco' to 'venda' to match the column name in the DataFrame
    sns.lineplot(x='dia', y='venda', data=gasolina_df, color='blue')

    # Adicionando título e rótulos
    plt.title('Preço da Gasolina por Dia', fontsize=16)
    plt.xlabel('Dia', fontsize=12)
    plt.ylabel('Preço da Gasolina (R$)', fontsize=12)

    # Salvando o gráfico como gasolina.png
    plt.savefig("/content/gasolina.png", dpi=300, bbox_inches='tight')

    # Exibindo o gráfico
    plt.show()

else:
    print(f"O arquivo {arquivo} não foi encontrado.")

from google.colab import files
uploaded = files.upload()

# Isso permitirá que você faça upload manual do arquivo CSV

arquivo = '/content/seu_arquivo_gasolina.csv'  # Atualize com o nome correto do arquivo carregado

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Ensure that 'gasolina.csv' is in the current directory or provide the correct path
arquivo = 'gasolina.csv'  # Or the correct path, e.g., '/content/drive/MyDrive/gasolina.csv'
# if using Google Drive, mount it using the following
#from google.colab import drive
#drive.mount('/content/drive')

try:
    gasolina_df = pd.read_csv(arquivo)
except FileNotFoundError:
    print(f"Error: File not found at path: {arquivo}")
    print("Please ensure the file is in the correct directory or provide the full path.")
    # Optionally, add code to upload the file here if it's missing
    # from google.colab import files
    # uploaded = files.upload()
    exit() # Exit the script if the file is not found

gasolina_df.head(50)

sns.set(style="whitegrid")
sns.lineplot(x='dia', y='venda', data=gasolina_df, color='green')

plt.title('Gráfico de valor da gasolina')
plt.xlabel('Dia')
plt.ylabel('Valor')

plt.show()

plt.savefig("gasolina.png")

"""### **2.3. Git**

Utilizando os comandos do `git`, adicione e "commite" os arquivos gerados (base, código Python e gráfico) na branch `develop`.
"""

!gti status # comandos git para adicionar e commitar os arquivos

"""### **2.4. Github**

Utilizando os comandos do `git`, envie o seu commit para o GitHub.
"""

!git push origin develop # comandos git para enviar o commit para o GitHub

"""### **2.5. Pull Request e Merge**"""

!git branch -a

!git checkout main

!git pull

"""No GitHub, crie um *pull request* (PR) para enviar o código da branch de `develop` para a branch `main`. Ainda na plataforma online, confira as atualizações, aprove o PR e realize o *merge*.

---
"""